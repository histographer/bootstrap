version: '2.4'

services:

  rabbitmq:
    env_file:
      - ".env"
    image: 'cytomine/rabbitmq:v1.1.2'
    restart: always
    networks:
      network_3:
        aliases:
          - rabbitmq
      software_router:
        aliases:
          - rabbitmq
    expose:
      - '5672'
      - '15672'


  postgresql:
    env_file:
      - ".env"
    image: 'cytomine/postgis:v2.0.0'
    restart: always
    mem_limit: 8g
    networks:
      network_3:
        aliases:
          - postgresql
    volumes:
      - "postgis_data:/var/lib/postgresql"


  mongodb:
    env_file:
      - ".env"
    image: 'cytomine/mongodb:v1.1.2'
    restart: always
    networks:
      network_3:
        aliases:
          - mongodb
    volumes:
      - mongodb_data:/data/db
    expose:
      - '27017'


  bioformat:
    env_file:
      - ".env"
    image: 'cytomine/bioformat:v1.1.2'
    restart: always
    networks:
      network_2:
        aliases:
          - bioformat
    environment:
      - "BIOFORMAT_PORT=${BIOFORMAT_PORT}"
    volumes:
      - "${IMS_STORAGE_PATH}:${IMS_STORAGE_PATH}"


  memcached:
    env_file:
      - ".env"
    build:
      context: "./memcached"
    image: "docker.pkg.github.com/histographer/infrastructure/memcached"
    restart: always
    networks:
      network_1:
        aliases:
          - memcached


  iipoff:
    env_file:
      - ".env"
    build:
      context: "./iipOff"
    image: "docker.pkg.github.com/histographer/infrastructure/iipoff"
    depends_on:
      - memcached
    restart: always
    privileged: true
    networks:
      network_1:
        aliases:
          - iipoff
      nginx:
        aliases:
          - iipoff
    environment:
      - NB_IIP_PROCESS=$NB_IIP_PROCESS
    volumes:
      - "${IMS_STORAGE_PATH}:$IMS_STORAGE_PATH"


  iipcyto:
    env_file:
      - ".env"
    build:
      context: "./iipCyto"
    image: "docker.pkg.github.com/histographer/infrastructure/iipcyto"
    restart: always
    networks:
      network_1:
        aliases:
          - iipcyto
      nginx:
        aliases:
          - iipcyto
    privileged: true
    environment:
      - NB_IIP_PROCESS=$NB_IIP_PROCESS
    volumes:
      - "${IMS_STORAGE_PATH}:${IMS_STORAGE_PATH}"


  ims:
    env_file:
      - ".env"
    build:
      context: "./ims"
    image: "docker.pkg.github.com/histographer/infrastructure/ims"
    restart: always
    depends_on:
      - core
    networks:
      network_1:
        aliases:
          - ims
      network_2:
        aliases:
          - ims
      nginx:
        aliases:
          - ims
    environment:
      - "NB_IIP_PROCESS=${NB_IIP_PROCESS}"
    volumes:
      - "${IMS_STORAGE_PATH}:${IMS_STORAGE_PATH}"
      - "${IMS_BUFFER_PATH}:/tmp/uploaded"

  core:
    env_file:
      - ".env"
    restart: always
    depends_on:
      - mongodb
      - postgresql
      - rabbitmq
    build:
      context: "./core"
    image: "docker.pkg.github.com/histographer/infrastructure/core"
    networks:
      network_3:
        aliases:
          - core
      nginx:
        aliases:
          - core


  digipat-frontend:
    env_file:
      - ".env"
    restart: always
    build:
      context: "./digipat-frontend"
    image: "docker.pkg.github.com/histographer/infrastructure/digipat-frontend-prod"
    networks:
      nginx:
        aliases:
          - digipat-frontend
    volumes:
      - "${IMS_BUFFER_PATH}:/tmp/uploaded"
    expose:
      - '80'


  pat-or-nat-frontend:
    env_file:
      - ".env"
    restart: always
    build:
      context: "./pat-or-nat-frontend"
    image: "docker.pkg.github.com/histographer/infrastructure/pat-or-nat-frontend"
    networks:
      nginx:
        aliases:
          - pat-or-nat-frontend
    volumes:
      - "${IMS_BUFFER_PATH}:/tmp/uploaded"
    expose:
      - '80'

  # TODO: Should use the existing mongodb service later
  pat-or-nat-db:
    env_file:
      - ".env"
    image: mongo:latest
    restart: always
    networks:
      pat-or-nat:
        aliases:
          - pat-or-nat-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${PATORNAT_MONGODB_ROOT_USERNAME} # root username
      MONGO_INITDB_ROOT_PASSWORD: ${PATORNAT_MONGODB_ROOT_PASSWORD} # root password
      MONGO_INITDB_DATABASE: ${PATORNAT_MONGODB_INITDB_DATABASE} # in this case it is patornat
      PATORNAT_MONGODB_USERNAME: ${PATORNAT_MONGODB_USERNAME} # For creation of r/w user
      PATORNAT_MONGODB_PASSWORD: ${PATORNAT_MONGODB_PASSWORD} # password for r/w user
      PATORNAT_MONGODB_DATABASE: ${PATORNAT_MONGODB_DATABASE} # database the user will have r/w access to
    volumes:
      - pat-or-nat-data:/data/db
      - ./database/db-init/:/docker-entrypoint-initdb.d
    expose:
      - "27017"

  pat-or-nat-backend:
    restart: always
    env_file:
      - ".env"
    image: "docker.pkg.github.com/histographer/pat-or-nat-backend/pat-or-nat-backend:latest"
    depends_on:
      - pat-or-nat-db
    networks:
      nginx:
        aliases:
          - pat-or-nat-backend
      pat-or-nat:
        aliases:
          - pat-or-nat-backend
    environment:
      PATORNAT_MONGODB_HOST: ${PATORNAT_MONGODB_HOST}
      PATORNAT_MONGODB_PORT: ${PATORNAT_MONGODB_PORT}
      PATORNAT_MONGODB_USERNAME: ${PATORNAT_MONGODB_ROOT_USERNAME}
      PATORNAT_MONGODB_PASSWORD: ${PATORNAT_MONGODB_ROOT_PASSWORD}
      PATORNAT_MONGODB_DATABASE: ${PATORNAT_MONGODB_DATABASE}
    expose:
      - "8080"


  analysis-rest-api:
    image: "docker.pkg.github.com/histographer/analysis-rest-api/analysis-rest-api:latest"
    env_file:
      - ".env"
    networks:
      nginx:
        aliases:
          - analysis-rest-api
    expose:
      - "80"

  nginx:
    restart: always
    env_file:
      - ".env"
    depends_on:
      - core
      - ims
      - iipoff
      - iipcyto
      - digipat-frontend
      - pat-or-nat-frontend
      - pat-or-nat-backend
      - analysis-rest-api
    build:
      context: "./nginx"
    image: "docker.pkg.github.com/histographer/infrastructure/nginx"
    networks:
      nginx:
        aliases:
          - nginx
    volumes:
      - "${IMS_BUFFER_PATH}:/tmp/uploaded"
    ports:
      - 80:80

  software_router:
    build:
      context: "./software_router"
    image: "docker.pkg.github.com/histographer/infrastructure/software_router"
    privileged: true
    depends_on:
      - core
      - nginx
    networks:
      software_router:
        aliases:
          - software_router
    environment:
      - "CORE_URL=http://${CORE_URL}"
      - "RABBITMQ_PUB_KEY=${RABBITMQ_PUB_KEY}"
      - "RABBITMQ_PRIV_KEY=${RABBITMQ_PRIV_KEY}"
    volumes:
      - "${ALGO_PATH}:/software_router/algo/"




volumes:
  postgis_data:
  mongodb_data:
  pat-or-nat-data:

networks:
  # TODO: lag bedre navn p√• nettverkene
  network_1:
  network_2:
  network_3:
  nginx:
  software_router:
  pat-or-nat:


